import streamlit as st
# from utils.auth import login, register
import random
import string
import time
from utils.auth import login, register, check_username_exists, get_user_email, reset_password_in_db



st.set_page_config(
    page_title="H·ªá th·ªëng Ch·∫©n ƒëo√°n B·ªánh Ph·ªïi", 
    page_icon="ü´Å",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS v·ªõi m√†u xanh nh·∫°t/ƒë·∫≠m v√† n·ªÅn tr·∫Øng
st.markdown("""
<style>
    /* Main theme colors */
    :root {
        --primary-blue: #2E86AB;
        --light-blue: #A5C3D9; 
        --lighter-blue: #E8F4F8;
        --dark-blue: #1B5E7F;
        --white: #FFFFFF;
        --light-gray: #F8FAFB;
        --text-dark: #2C3E50;
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(180deg, var(--primary-blue) 0%, var(--dark-blue) 100%);
    }
    
    .css-17eq0hr {
        background: transparent;
        color: white;
    }
    
    .css-pkbazv {
        color: white !important;
        font-weight: 600;
    }
    
    /* Main content area */
    .main .block-container {
        background: var(--white);
        padding: 1rem 2rem;
        max-width: 1200px;
    }
    
    /* Header styling - COMPACT VERSION */
    .main-header {
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--light-blue) 100%);
        padding: 1.5rem 2rem;
        border-radius: 15px;
        margin-bottom: 1.5rem;
        text-align: center;
        color: white;
        box-shadow: 0 4px 20px rgba(46, 134, 171, 0.25);
        position: relative;
        overflow: hidden;
    }
    
    .main-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
        animation: float 6s ease-in-out infinite;
    }
    
    @keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-15px); }
    }
    
    .main-header h1 {
        font-size: 1.8rem;
        margin-bottom: 0.3rem;
        font-weight: 700;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: relative;
        z-index: 2;
    }
    
    .main-header p {
        font-size: 1rem;
        opacity: 0.95;
        position: relative;
        z-index: 2;
        margin: 0;
    }
    
    /* Feature cards */
    .feature-card {
        background: var(--white);
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(46, 134, 171, 0.15);
        margin: 1rem 0;
        border: 1px solid var(--lighter-blue);
        border-left: 6px solid var(--primary-blue);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .feature-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-blue), var(--light-blue));
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 30px rgba(46, 134, 171, 0.25);
    }
    
    .feature-card h4 {
        color: var(--primary-blue);
        margin-bottom: 1rem;
        font-size: 1.2rem;
        font-weight: 600;
    }
    
    .feature-card p {
        color: var(--text-dark);
        line-height: 1.6;
        margin-bottom: 0.5rem;
    }
    
    /* Stats cards */
    .stats-card {
        background: linear-gradient(135deg, var(--lighter-blue) 0%, var(--light-blue) 100%);
        padding: 2rem 1rem;
        border-radius: 16px;
        text-align: center;
        margin: 0.5rem 0;
        box-shadow: 0 4px 15px rgba(46, 134, 171, 0.2);
        transition: transform 0.3s ease;
        border: 1px solid rgba(46, 134, 171, 0.1);
    }
    
    .stats-card:hover {
        transform: scale(1.02);
    }
    
    .stats-card h3 {
        color: var(--dark-blue);
        font-size: 2.2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .stats-card p {
        color: var(--primary-blue);
        font-weight: 600;
        font-size: 0.95rem;
    }
    
    /* Login container - COMPACT VERSION */
    .login-container {
        background: var(--white);
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 6px 25px rgba(46, 134, 171, 0.15);
        border: 1px solid var(--lighter-blue);
        max-width: 380px;
        margin: 1rem auto;
    }
    
    .login-container h4 {
        color: var(--primary-blue);
        text-align: center;
        margin-bottom: 1.2rem;
        font-size: 1.2rem;
        font-weight: 600;
    }
    
    /* Compact form styling */
    .compact-form {
        margin: 0.8rem 0;
    }
    
    .compact-form .stTextInput > div > div > input {
        padding: 0.6rem 1rem;
        font-size: 0.95rem;
        border-radius: 8px;
    }
    
    .compact-form .stTextInput > label {
        font-size: 0.9rem;
        font-weight: 600;
        margin-bottom: 0.3rem;
    }
    
    /* Buttons - COMPACT */
    .stButton > button {
        width: 100%;
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--dark-blue) 100%);
        color: white;
        border: none;
        padding: 0.6rem 1.2rem;
        border-radius: 10px;
        font-weight: 600;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        box-shadow: 0 3px 12px rgba(46, 134, 171, 0.3);
        margin: 0.3rem 0;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 18px rgba(46, 134, 171, 0.4);
    }
    
    /* Forgot password button - special styling */
    .forgot-password-btn {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24) !important;
    }
    
    .forgot-password-btn:hover {
        background: linear-gradient(135deg, #ff5252, #d63031) !important;
    }
    
    /* Input fields */
    .stTextInput > div > div > input {
        border: 2px solid var(--light-blue);
        border-radius: 10px;
        padding: 0.8rem 1rem;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: var(--primary-blue);
        box-shadow: 0 0 0 3px rgba(46, 134, 171, 0.1);
    }
    
    /* Sidebar welcome message */
    .sidebar-welcome {
        background: rgba(255, 255, 255, 0.15);
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        color: black;
        text-align: center;
    }
    
    /* Auth box */
    .auth-box {
        background: rgba(255, 255, 255, 0.1);
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        color: black;
        text-align: center;
    }
    
    /* Info box */
    .stInfo {
        background: var(--lighter-blue);
        border: 1px solid var(--light-blue);
        border-radius: 12px;
        padding: 1.5rem;
    }
    
    /* Success/Error messages */
    .stSuccess {
        background: #D4F4DD;
        border: 1px solid #4CAF50;
        color: #2E7D32;
        border-radius: 10px;
    }
    
    .stError {
        background: #FFEBEE;
        border: 1px solid #F44336;
        color: #C62828;
        border-radius: 10px;
    }
    
    .stWarning {
        background: #FFF3E0;
        border: 1px solid #FF9800;
        color: #E65100;
        border-radius: 10px;
    }
    
    /* Forgot password specific styling */
    .forgot-password-container {
        background: linear-gradient(135deg, #fff5f5, #ffe8e8);
        border: 2px solid #ff6b6b;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
    }
    
    .forgot-password-container h4 {
        color: #d63031;
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .verification-code {
        background: #f1f3f4;
        border: 2px solid #34a853;
        border-radius: 8px;
        padding: 1rem;
        font-family: 'Courier New', monospace;
        font-size: 1.5rem;
        font-weight: bold;
        text-align: center;
        color: #137333;
        margin: 1rem 0;
        letter-spacing: 0.3rem;
    }
    
    /* Divider */
    hr {
        border: none;
        height: 2px;
        background: linear-gradient(90deg, transparent, var(--light-blue), transparent);
        margin: 2rem 0;
    }
    
    /* Footer */
    .footer {
        text-align: center;
        color: var(--primary-blue);
        padding: 2rem;
        background: var(--light-gray);
        border-radius: 15px;
        margin-top: 2rem;
    }
    
    /* Page navigation */
    .nav-item {
        background: rgba(255, 255, 255, 0.1);
        margin: 0.2rem 0;
        border-radius: 8px;
        transition: background 0.3s ease;
    }
    
    .nav-item:hover {
        background: rgba(255, 255, 255, 0.2);
    }
    
    /* Need login message */
    .need-login {
        background: var(--lighter-blue);
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin: 2rem 0;
        border: 2px solid var(--light-blue);
    }
    
    /* Button group compact styling */
    .button-group-compact {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.8rem;
    }
    
    .button-group-compact .stButton {
        flex: 1;
    }
    
    .button-group-compact .stButton > button {
        margin: 0;
        font-size: 0.85rem;
    }
</style>
""", unsafe_allow_html=True)

# Utility functions for password reset
def generate_verification_code():
    """T·∫°o m√£ x√°c th·ª±c 6 ch·ªØ s·ªë"""
    return ''.join(random.choices(string.digits, k=6))

def send_verification_email(username, code):
    """Gi·∫£ l·∫≠p g·ª≠i email (trong th·ª±c t·∫ø s·∫Ω t√≠ch h·ª£p email service)"""
    email = get_user_email(username)
    if email:
        print(f"üìß G·ª≠i m√£ x√°c th·ª±c {code} t·ªõi email: {email} cho user: {username}")
        return True
    return False

# Kh·ªüi t·∫°o session state
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.user = None

if 'show_auth' not in st.session_state:
    st.session_state.show_auth = False

if 'auth_page' not in st.session_state:  
    st.session_state.auth_page = "ƒêƒÉng nh·∫≠p"

# Kh·ªüi t·∫°o session state cho ch·ª©c nƒÉng qu√™n m·∫≠t kh·∫©u
if 'forgot_password_step' not in st.session_state:
    st.session_state.forgot_password_step = 1  # 1: nh·∫≠p username, 2: nh·∫≠p m√£ x√°c th·ª±c, 3: ƒë·∫∑t m·∫≠t kh·∫©u m·ªõi

if 'verification_code' not in st.session_state:
    st.session_state.verification_code = None

if 'reset_username' not in st.session_state:
    st.session_state.reset_username = None

if 'code_sent_time' not in st.session_state:
    st.session_state.code_sent_time = None

# Sidebar - lu√¥n hi·ªÉn th·ªã menu
st.sidebar.title("ü´Å Menu Ch√≠nh")

# Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√† hi·ªÉn th·ªã th√¥ng tin user
if st.session_state.logged_in:
    st.sidebar.markdown(f"""
    <div class="sidebar-welcome">
        <h4>üëã Xin ch√†o!</h4>
        <p><strong>{st.session_state.user['username']}</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    if st.sidebar.button("üö™ ƒêƒÉng xu·∫•t", use_container_width=True):
        st.session_state.logged_in = False
        st.session_state.user = None
        st.session_state.show_auth = False
        st.rerun()
else:
    # Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω trong sidebar
    st.sidebar.markdown("""
    <div class="auth-box">
        <h4>üîê X√°c th·ª±c</h4>
        <p>ƒêƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng</p>
    </div>
    """, unsafe_allow_html=True)
    
    if st.sidebar.button("üöÄ ƒêƒÉng nh·∫≠p", use_container_width=True):
        st.session_state.show_auth = True
        st.session_state.auth_page = "ƒêƒÉng nh·∫≠p"
    
    if st.sidebar.button("üìù ƒêƒÉng k√Ω", use_container_width=True):
        st.session_state.show_auth = True
        st.session_state.auth_page = "ƒêƒÉng k√Ω"
    
    if st.sidebar.button("üîë Qu√™n m·∫≠t kh·∫©u", use_container_width=True):
        st.session_state.show_auth = True
        st.session_state.auth_page = "Qu√™n m·∫≠t kh·∫©u"
        st.session_state.forgot_password_step = 1  # Reset v·ªÅ b∆∞·ªõc ƒë·∫ßu

# Hi·ªÉn th·ªã n·ªôi dung trang ch·ªß
# Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
if st.session_state.show_auth and not st.session_state.logged_in:
    # COMPACT HEADER
    st.markdown("""
    <div class="main-header">
        <h1>ü´Å H·ªá th·ªëng Ch·∫©n ƒëo√°n B·ªánh Ph·ªïi</h1>
        <p>C√¥ng ngh·ªá AI ti√™n ti·∫øn - Ch·∫©n ƒëo√°n ch√≠nh x√°c, nhanh ch√≥ng</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Container trung t√¢m cho form auth - COMPACT
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col2:
        # ========== FORM ƒêƒÇNG NH·∫¨P ==========
        if st.session_state.auth_page == "ƒêƒÉng nh·∫≠p":
            st.markdown("""
            <div class="login-container">
                <h4>üîê ƒêƒÉng nh·∫≠p</h4>
            </div>
            """, unsafe_allow_html=True)

            # Compact form container
            st.markdown('<div class="compact-form">', unsafe_allow_html=True)
            
            username = st.text_input("üë§ T√™n ƒëƒÉng nh·∫≠p", placeholder="Username", key="login_user")
            password = st.text_input("üîí M·∫≠t kh·∫©u", type="password", placeholder="Password", key="login_pass")
            
            st.markdown('</div>', unsafe_allow_html=True)

            # Compact button group
            col_btn1, col_btn2, col_btn3 = st.columns(3)
            
            with col_btn1:
                if st.button("üöÄ ƒêƒÉng nh·∫≠p", use_container_width=True):
                    if username and password:
                        user = login(username, password)
                        if user:
                            # Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n TR∆Ø·ªöC KHI ƒëƒÉng nh·∫≠p
                            if user.get("status") == "locked":
                                st.error("üîí T√†i kho·∫£n ƒë√£ b·ªã kh√≥a! Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
                            else:
                                # Ch·ªâ cho ph√©p ƒëƒÉng nh·∫≠p n·∫øu status != "locked"
                                st.session_state.logged_in = True
                                st.session_state.user = user
                                st.session_state.show_auth = False
                                st.success("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                                st.rerun()
                        else:
                            st.error("‚ùå Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u")
                    else:
                        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")

            with col_btn2:
                if st.button("üìù ƒêƒÉng k√Ω", use_container_width=True):
                    st.session_state.auth_page = "ƒêƒÉng k√Ω"
                    st.rerun()
            
            with col_btn3:
                if st.button("‚ùå H·ªßy", use_container_width=True):
                    st.session_state.show_auth = False
                    st.rerun()

            # Link qu√™n m·∫≠t kh·∫©u
            st.markdown("<hr style='margin: 1rem 0;'>", unsafe_allow_html=True)
            if st.button("üîë Qu√™n m·∫≠t kh·∫©u?", use_container_width=True, key="forgot_from_login"):
                st.session_state.auth_page = "Qu√™n m·∫≠t kh·∫©u"
                st.session_state.forgot_password_step = 1
                st.rerun()

        # ========== FORM ƒêƒÇNG K√ù ==========
        elif st.session_state.auth_page == "ƒêƒÉng k√Ω":
            st.markdown("""
            <div class="login-container">
                <h4>üìù T·∫°o t√†i kho·∫£n</h4>
            </div>
            """, unsafe_allow_html=True)

            # Compact form container
            st.markdown('<div class="compact-form">', unsafe_allow_html=True)
            
            username = st.text_input("üë§ T√™n ƒëƒÉng nh·∫≠p", placeholder="Username", key="reg_user")
            password = st.text_input("üîí M·∫≠t kh·∫©u", type="password", placeholder="Password", key="reg_pass")
            confirm_password = st.text_input("üîí X√°c nh·∫≠n m·∫≠t kh·∫©u", type="password", placeholder="Confirm Password", key="reg_pass2")
            
            st.markdown('</div>', unsafe_allow_html=True)

            # Compact button group
            col_btn1, col_btn2, col_btn3 = st.columns(3)
            
            with col_btn1:
                if st.button("‚úÖ T·∫°o TK", use_container_width=True):
                    if username and password and confirm_password:
                        if password == confirm_password:
                            try:
                                # M·∫∑c ƒë·ªãnh g√°n status="active"
                                if register(username, password, status="active"):
                                    st.success("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!")
                                    st.balloons()
                                    st.session_state.auth_page = "ƒêƒÉng nh·∫≠p"
                                    st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå L·ªói: {e}")
                        else:
                            st.error("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp")
                    else:
                        st.warning("‚ö†Ô∏è Nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")

            with col_btn2:
                if st.button("üîÑ ƒêƒÉng nh·∫≠p", use_container_width=True):
                    st.session_state.auth_page = "ƒêƒÉng nh·∫≠p"
                    st.rerun()
                    
            with col_btn3:
                if st.button("‚ùå H·ªßy", use_container_width=True):
                    st.session_state.show_auth = False
                    st.rerun()

        # ========== FORM QU√äN M·∫¨T KH·∫®U ==========
        elif st.session_state.auth_page == "Qu√™n m·∫≠t kh·∫©u":
            # B∆Ø·ªöC 1: Nh·∫≠p username
            if st.session_state.forgot_password_step == 1:
                st.markdown("""
                <div class="forgot-password-container">
                    <h4>üîë Kh√¥i ph·ª•c m·∫≠t kh·∫©u</h4>
                    <p style="text-align: center; color: #666;">B∆∞·ªõc 1: Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p c·ªßa b·∫°n</p>
                </div>
                """, unsafe_allow_html=True)

                username = st.text_input("üë§ T√™n ƒëƒÉng nh·∫≠p", placeholder="Nh·∫≠p username c·∫ßn kh√¥i ph·ª•c", key="forgot_username")
                
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    # Trong ph·∫ßn x·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u - B∆∞·ªõc 1, thay th·∫ø:
                    if st.button("üìß G·ª≠i m√£ x√°c th·ª±c", use_container_width=True):
                        if username:
                            # S·ª¨A: S·ª≠ d·ª•ng h√†m check_username_exists t·ª´ auth.py
                            if check_username_exists(username):
                                # T·∫°o m√£ x√°c th·ª±c
                                verification_code = generate_verification_code()
                                st.session_state.verification_code = verification_code
                                st.session_state.reset_username = username
                                st.session_state.code_sent_time = time.time()
                                
                                # G·ª≠i email
                                if send_verification_email(username, verification_code):
                                    # Chuy·ªÉn sang b∆∞·ªõc 2
                                    st.session_state.forgot_password_step = 2
                                    st.success(f"‚úÖ ƒê√£ g·ª≠i m√£ x√°c th·ª±c ƒë·∫øn email c·ªßa t√†i kho·∫£n: {username}")
                                    time.sleep(1)
                                    st.rerun()
                                else:
                                    st.error("‚ùå Kh√¥ng th·ªÉ g·ª≠i email! Vui l√≤ng th·ª≠ l·∫°i.")
                            else:
                                st.error("‚ùå T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i!")
                        else:
                            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p")
                
                with col_btn2:
                    if st.button("üîô Quay l·∫°i ƒëƒÉng nh·∫≠p", use_container_width=True):
                        st.session_state.auth_page = "ƒêƒÉng nh·∫≠p"
                        st.rerun()

            # B∆Ø·ªöC 2: Nh·∫≠p m√£ x√°c th·ª±c
            elif st.session_state.forgot_password_step == 2:
                st.markdown("""
                <div class="forgot-password-container">
                    <h4>üîë Kh√¥i ph·ª•c m·∫≠t kh·∫©u</h4>
                    <p style="text-align: center; color: #666;">B∆∞·ªõc 2: Nh·∫≠p m√£ x√°c th·ª±c</p>
                </div>
                """, unsafe_allow_html=True)

                st.info(f"üìß M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa t√†i kho·∫£n: **{st.session_state.reset_username}**")
                
                # Hi·ªÉn th·ªã m√£ x√°c th·ª±c ƒë·ªÉ demo (trong th·ª±c t·∫ø s·∫Ω kh√¥ng hi·ªÉn th·ªã)
                st.markdown(f"""
                <div class="verification-code">
                    üîê M√£ demo: {st.session_state.verification_code}
                </div>
                <p style="text-align: center; font-size: 0.8rem; color: #666;">
                    (Trong th·ª±c t·∫ø, m√£ n√†y s·∫Ω ƒë∆∞·ª£c g·ª≠i qua email v√† kh√¥ng hi·ªÉn th·ªã ·ªü ƒë√¢y)
                </p>
                """, unsafe_allow_html=True)

                entered_code = st.text_input("üî¢ M√£ x√°c th·ª±c (6 ch·ªØ s·ªë)", placeholder="Nh·∫≠p m√£ 6 ch·ªØ s·ªë", key="verification_code_input", max_chars=6)
                
                # Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n (5 ph√∫t)
                if st.session_state.code_sent_time:
                    time_elapsed = time.time() - st.session_state.code_sent_time
                    time_remaining = max(0, 300 - time_elapsed)  # 5 ph√∫t = 300 gi√¢y
                    
                    if time_remaining > 0:
                        minutes = int(time_remaining // 60)
                        seconds = int(time_remaining % 60)
                        st.info(f"‚è∞ M√£ c√≥ hi·ªáu l·ª±c trong: {minutes:02d}:{seconds:02d}")
                    else:
                        st.error("‚ùå M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n! Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi.")

                col_btn1, col_btn2, col_btn3 = st.columns(3)
                
                with col_btn1:
                    if st.button("‚úÖ X√°c th·ª±c", use_container_width=True):
                        if entered_code:
                            if len(entered_code) == 6 and entered_code == st.session_state.verification_code:
                                if time_remaining > 0:
                                    st.session_state.forgot_password_step = 3
                                    st.success("‚úÖ X√°c th·ª±c th√†nh c√¥ng!")
                                    time.sleep(1)
                                    st.rerun()
                                else:
                                    st.error("‚ùå M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n!")
                            else:
                                st.error("‚ùå M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng!")
                        else:
                            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ x√°c th·ª±c")
                
                with col_btn2:
                    if st.button("üîÑ G·ª≠i l·∫°i m√£", use_container_width=True):
                        # T·∫°o m√£ m·ªõi
                        new_code = generate_verification_code()
                        st.session_state.verification_code = new_code
                        st.session_state.code_sent_time = time.time()
                        send_verification_email(st.session_state.reset_username, new_code)
                        st.success("‚úÖ ƒê√£ g·ª≠i l·∫°i m√£ x√°c th·ª±c!")
                        time.sleep(1)
                        st.rerun()
                
                with col_btn3:
                    if st.button("‚ùå H·ªßy", use_container_width=True):
                        st.session_state.auth_page = "ƒêƒÉng nh·∫≠p"
                        st.session_state.forgot_password_step = 1
                        st.rerun()

            # B∆Ø·ªöC 3: ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi
            elif st.session_state.forgot_password_step == 3:
                st.markdown("""
                <div class="forgot-password-container">
                    <h4>üîë Kh√¥i ph·ª•c m·∫≠t kh·∫©u</h4>
                    <p style="text-align: center; color: #666;">B∆∞·ªõc 3: ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi</p>
                </div>
                """, unsafe_allow_html=True)

                st.success(f"‚úÖ X√°c th·ª±c th√†nh c√¥ng cho t√†i kho·∫£n: **{st.session_state.reset_username}**")
                
                new_password = st.text_input("üîí M·∫≠t kh·∫©u m·ªõi", type="password", placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi", key="new_password")
                confirm_new_password = st.text_input("üîí X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi", type="password", placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi", key="confirm_new_password")
                
                # Hi·ªÉn th·ªã y√™u c·∫ßu m·∫≠t kh·∫©u
                st.info("""
                **üìã Y√™u c·∫ßu m·∫≠t kh·∫©u:**
                - √çt nh·∫•t 6 k√Ω t·ª±
                - N√™n c√≥ ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë
                - Kh√¥ng ch·ª©a kho·∫£ng tr·∫Øng
                """)
                
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    if st.button("üíæ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u", use_container_width=True):
                        if new_password and confirm_new_password:
                            if new_password == confirm_new_password:
                                if len(new_password) >= 6:
                                    # C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database
                                    if reset_password_in_db(st.session_state.reset_username, new_password):
                                        st.success("üéâ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!")
                                        st.balloons()
                                        
                                        # Reset t·∫•t c·∫£ state v√† quay v·ªÅ ƒëƒÉng nh·∫≠p
                                        st.session_state.auth_page = "ƒêƒÉng nh·∫≠p"
                                        st.session_state.forgot_password_step = 1
                                        st.session_state.verification_code = None
                                        st.session_state.reset_username = None
                                        st.session_state.code_sent_time = None
                                        
                                        time.sleep(2)
                                        st.rerun()
                                    else:
                                        st.error("‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u!")
                                else:
                                    st.error("‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!")
                            else:
                                st.error("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                        else:
                            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
                
                with col_btn2:
                    if st.button("üîô Quay l·∫°i ƒëƒÉng nh·∫≠p", use_container_width=True):
                        st.session_state.auth_page = "ƒêƒÉng nh·∫≠p"
                        st.session_state.forgot_password_step = 1
                        st.rerun()

else:
    # Trang ch·ªß ch√≠nh - lu√¥n hi·ªÉn th·ªã cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
    st.markdown("""
    <div class="main-header">
        <h1>ü´Å H·ªá th·ªëng Ch·∫©n ƒëo√°n B·ªánh Ph·ªïi AI</h1>
        <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng ch·∫©n ƒëo√°n th√¥ng minh</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Th·ªëng k√™ nhanh
    st.markdown("### üìà Th·ªëng k√™ t·ªïng quan")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="stats-card">
            <h3>1,250+</h3>
            <p>Ca ch·∫©n ƒëo√°n th√†nh c√¥ng</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="stats-card">
            <h3>95.8%</h3>
            <p>ƒê·ªô ch√≠nh x√°c trung b√¨nh</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="stats-card">
            <h3>2.3s</h3>
            <p>Th·ªùi gian x·ª≠ l√Ω trung b√¨nh</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="stats-card">
            <h3>24/7</h3>
            <p>H·ªó tr·ª£ li√™n t·ª•c</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Ch·ª©c nƒÉng ch√≠nh
    st.markdown("### üéØ Ch·ª©c nƒÉng ch√≠nh c·ªßa h·ªá th·ªëng")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <h4>üîç Ch·∫©n ƒëo√°n t·ª´ X-quang</h4>
            <p>‚Ä¢ T·∫£i l√™n ·∫£nh X-quang ng·ª±c ch·∫•t l∆∞·ª£ng cao</p>
            <p>‚Ä¢ Ph√¢n t√≠ch t·ª± ƒë·ªông b·∫±ng AI ti√™n ti·∫øn</p>
            <p>‚Ä¢ Nh·∫≠n k·∫øt qu·∫£ chi ti·∫øt v·ªõi t·ª∑ l·ªá tin c·∫≠y</p>
            <p>‚Ä¢ Xu·∫•t b√°o c√°o PDF chuy√™n nghi·ªáp</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-card">
            <h4>üìä L·ªãch s·ª≠ & Th·ªëng k√™</h4>
            <p>‚Ä¢ Xem l·∫°i c√°c ca ƒë√£ ch·∫©n ƒëo√°n tr∆∞·ªõc ƒë√≥</p>
            <p>‚Ä¢ So s√°nh k·∫øt qu·∫£ theo th·ªùi gian</p>
            <p>‚Ä¢ Ph√¢n t√≠ch xu h∆∞·ªõng b·ªánh l√Ω</p>
            <p>‚Ä¢ B√°o c√°o th·ªëng k√™ t·ªïng h·ª£p</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <h4>üéì Trung t√¢m ki·∫øn th·ª©c</h4>
            <p>‚Ä¢ Th∆∞ vi·ªán b·ªánh ph·ªïi th∆∞·ªùng g·∫∑p</p>
            <p>‚Ä¢ H∆∞·ªõng d·∫´n ƒë·ªçc X-quang c∆° b·∫£n</p>
            <p>‚Ä¢ C·∫≠p nh·∫≠t nghi√™n c·ª©u y khoa m·ªõi nh·∫•t</p>
            <p>‚Ä¢ Video h∆∞·ªõng d·∫´n chi ti·∫øt</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-card">
            <h4>ü§ñ AI T∆∞ v·∫•n th√¥ng minh</h4>
            <p>‚Ä¢ T∆∞ v·∫•n s∆° b·ªô d·ª±a tr√™n tri·ªáu ch·ª©ng</p>
            <p>‚Ä¢ G·ª£i √Ω c√°c x√©t nghi·ªám c·∫ßn thi·∫øt</p>
            <p>‚Ä¢ H·ªó tr·ª£ 24/7 v·ªõi chatbot AI</p>
            <p>‚Ä¢ K·∫øt n·ªëi v·ªõi b√°c sƒ© chuy√™n khoa</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    st.markdown("### üöÄ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng nhanh")
    
    st.info("""
    **üìã C√°c b∆∞·ªõc th·ª±c hi·ªán:**
    
    1. **üîç Ch·∫©n ƒëo√°n:** Ch·ªçn "Ch·∫©n ƒëo√°n" trong menu ‚Üí ƒêƒÉng nh·∫≠p n·∫øu ch∆∞a ‚Üí T·∫£i ·∫£nh X-quang ‚Üí Nh·∫≠n k·∫øt qu·∫£
    2. **üìä Theo d√µi:** V√†o "L·ªãch s·ª≠" ƒë·ªÉ xem c√°c ca ƒë√£ ch·∫©n ƒëo√°n v√† th·ªëng k√™ chi ti·∫øt  
    3. **ü§ñ T∆∞ v·∫•n:** S·ª≠ d·ª•ng "AI T∆∞ v·∫•n" ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ v√† t∆∞ v·∫•n s∆° b·ªô
    4. **üìö H·ªçc h·ªèi:** Tham kh·∫£o "Trung t√¢m ki·∫øn th·ª©c" ƒë·ªÉ n√¢ng cao ki·∫øn th·ª©c y khoa
    
    üí° **L∆∞u √Ω quan tr·ªçng:** 
    ‚Ä¢ S·ª≠ d·ª•ng ·∫£nh X-quang r√µ n√©t, ch·∫•t l∆∞·ª£ng cao ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t
    ‚Ä¢ K·∫øt qu·∫£ ch·ªâ mang t√≠nh tham kh·∫£o, c·∫ßn c√≥ √Ω ki·∫øn c·ªßa b√°c sƒ© chuy√™n khoa
    ‚Ä¢ D·ªØ li·ªáu c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t tuy·ªát ƒë·ªëi theo ti√™u chu·∫©n y t·∫ø
    
    üîë **Ch·ª©c nƒÉng m·ªõi:** 
    ‚Ä¢ **Qu√™n m·∫≠t kh·∫©u:** Kh√¥i ph·ª•c t√†i kho·∫£n d·ªÖ d√†ng qua 3 b∆∞·ªõc ƒë∆°n gi·∫£n
    ‚Ä¢ **B·∫£o m·∫≠t cao:** M√£ x√°c th·ª±c 6 ch·ªØ s·ªë v·ªõi th·ªùi gian hi·ªáu l·ª±c 5 ph√∫t
    ‚Ä¢ **T·ª± ƒë·ªông h√≥a:** G·ª≠i m√£ qua email v√† c·∫≠p nh·∫≠t m·∫≠t kh·∫©u t·ª©c th·ªùi
    """)

# Footer - lu√¥n hi·ªÉn th·ªã
st.markdown("""
<hr>
<div class="footer">
    <h4>ü´Å H·ªá th·ªëng Ch·∫©n ƒëo√°n B·ªánh Ph·ªïi </h4>
    <p><strong>C√¥ng ngh·ªá ti√™n ti·∫øn - Ch·∫©n ƒëo√°n ch√≠nh x√°c</strong></p>
    <p>üè• Ph√°t tri·ªÉn b·ªüi ƒê·ªôi ng≈© Y t·∫ø C√¥ng ngh·ªá | üìû H·ªó tr·ª£: 0321564789</p>
    <p>üåê Website: <strong>http://localhost:8501/</strong> | ‚úâÔ∏è Email: pneumonia@gmail.com</p>
</div>
""", unsafe_allow_html=True)